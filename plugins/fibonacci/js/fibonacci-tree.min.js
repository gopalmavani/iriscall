class FibonacciTree {
    constructor(t, e, a, i) {
        this.originalData = t, this.svg = e, this.tooltip = a, this.config = {
            isRadial: !0,
            levels: 12,
            margin: {
                x: 0,
                y: 0
            },
            ...i
        }, this.dimensions = {
            width: e.attr("width") - 2 * this.config.margin.x,
            height: e.attr("height") - 2 * this.config.margin.y
        }, this.radius = this.getTreeRadius(this.config.levels, this.dimensions.height), this.center = {
            x: Math.floor(this.dimensions.width / 2) + this.config.margin.x,
            y: Math.floor(this.dimensions.height / 2) + this.config.margin.y
        }, this.generateTree = this.generateTree.bind(this), this.handleNodeClick = this.handleNodeClick.bind(this), this.handleMouseOver = this.handleMouseOver.bind(this), this.handleMouseOut = this.handleMouseOut.bind(this), this.drawRadialChart = this.drawRadialChart.bind(this), this.drawHierarchicalChart = this.drawHierarchicalChart.bind(this), this.generateTree(this.originalData[0].id)
    }
    generateTree(t) {
        const e = new TreeGenerator(this.originalData, this.config.levels - 1).createNode(t, 0),
            a = d3.hierarchy(e);
        this.config.isRadial ? (this.calculateTree(a, {
            first: 360,
            second: this.radius
        }), this.drawRadialChart(a)) : (this.calculateTree(a, {
            first: this.dimensions.width,
            second: this.dimensions.height
        }), this.drawHierarchicalChart(a))
    }
    handleNodeClick(t) {
        if (!t.data.isPlaceholder) {
            this.svg.select("g").remove(), this.svg.selectAll("circle").remove(), this.tooltip.transition().duration(200).style("opacity", 0);
            const e = 0 === t.depth ? this.originalData[0].id : t.data.name;
            this.generateTree(e)
            /*nodeClick(e)*/
        }
    }
    handleMouseOver(t) {
        t.data.isPlaceholder || (this.tooltip.transition().duration(200).style("opacity", .9), this.tooltip.html(`${t.data.data.email}<br/>${t.data.data.cbm_account_num}`).style("left", `${d3.event.pageX-300}px`).style("top", `${d3.event.pageY-200}px`))
    }
    handleMouseOut(t) {
        t.data.isPlaceholder || this.tooltip.transition().duration(500).style("opacity", 0)
    }
    getTreeRadius(t, e) {
        return t * Math.floor(e / (2 * t))
    }
    calculateTree(t, e) {
        return d3.tree().size([e.first, e.second]).separation((t, e) => (t.parent == e.parent ? 1 : 2) / t.depth)(t)
    }
    project(t, e) {
        const a = -(t + 90) / 180 * Math.PI,
            i = e;
        return [this.center.x + i * Math.cos(a), this.center.y + i * Math.sin(a)]
    }
    drawRadialChart(t) {
        const e = this.svg.append("g"),
            a = this.radius / (this.config.levels - 2);
        e.selectAll("fibonacci__svg__circle").data([...Array(this.config.levels - 2).keys()]).enter().append("circle").attr("class", "fibonacci__svg__circle").style("fill", "none").attr("r", (t, e) => a * (e + 1)).attr("cx", this.center.x).attr("cy", this.center.y), e.selectAll(".fibonacci__svg__line").data(t.descendants().slice(1)).enter().append("path").attr("class", t => `fibonacci__svg__line ${t.data.isLeftChild?"fibonacci__svg__line--left":""}`).attr("d", t => "M" + this.project(t.x, t.y) + "C" + this.project(t.x, (t.y + t.parent.y) / 2) + " " + this.project(t.parent.x, (t.y + t.parent.y) / 2) + " " + this.project(t.parent.x, t.parent.y));
        const i = e.selectAll(".node").data(t.descendants()).enter().append("g").attr("class", t => `fibonacci__svg__node${t.children?" fibonacci__svg__node--internal":" fibonacci__svg__node--leaf"} ${t.data.isPlaceholder&&" fibonacci__svg__node--placeholder"}`).attr("transform", t => `translate(${this.project(t.x,t.y)})`);
        i.append("circle").attr("r", t => t.data.hidden ? 0 : 5).on("click", this.handleNodeClick).on("mouseover", this.handleMouseOver).on("mouseout", this.handleMouseOut), i.append("text").attr("dy", ".31em").attr("x", t => t.x < 180 == !t.children ? -8 : 8).style("text-anchor", t => t.x < 180 == !t.children ? "end" : "start").attr("transform", t => `rotate(${t.x<180?90-t.x:-t.x-90})`).text(t => t.data.isPlaceholder ? "" : t.data.name)
    }
    drawHierarchicalChart(t) {
        const e = this.svg.append("g").attr("transform", `translate(${this.config.margin.x}, ${this.config.margin.y})`);
        e.append("g").selectAll("path").data(t.links()).join("path").attr("class", t => `fibonacci__svg__line ${t.target.data.isLeftChild?"fibonacci__svg__line--left":""}`).attr("d", d3.linkVertical().x(t => t.x).y(t => t.y));
        const a = e.append("g").selectAll("g").data(t.descendants()).join("g").attr("class", t => `fibonacci__svg__node${t.children?" fibonacci__svg__node--internal":" fibonacci__svg__node--leaf"} ${t.data.isPlaceholder&&" fibonacci__svg__node--placeholder"}`).attr("transform", t => `translate(${t.x},${t.y})`);
        a.append("circle").attr("r", t => t.data.hidden ? 0 : 5).on("click", this.handleNodeClick).on("mouseover", this.handleMouseOver).on("mouseout", this.handleMouseOut), a.append("text").attr("dy", "0.31em").attr("x", t => t.children ? -8 : 8).attr("text-anchor", t => t.children ? "end" : "start").attr("transform", t => "rotate(90)").text(t => t.data.isPlaceholder ? "" : t.data.name)
    }
}